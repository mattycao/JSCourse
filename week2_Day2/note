正则：
\d 正则中出现的特殊含义的字符叫做元字符
+
\w  a-zA-Z0-9_
\b
. except the \n
? *
^ $
[0-9] based on the ascii table

定义的方式：
1. 直接量  //
2. 构造函数方式
    new RegExp()
3. /ab/i, i 模式修正符号， i-> case insenstive, g/ global search
4. new Reg('ab', 'i')
5. 字符串中间的转义
    比如\,要本身在里面有意义，所以需要\\转义
    但是构造函数方法可以接受参数， 因为传入参数是string

6. 关于边界
   除了正常的边界，\b, one-two -也是边界
   /\b[q-z]+\b/
   . get everything except '\n'

7. 为空测试
   reg=/^\s*$/
   an exception,

8. 反向引用失效当不记录表达式

9. 正则 贪婪且懒惰

String and reg expression 方法：
1. if add g, then the reg object will have lastIndex attribute
   so if you using the reg test method, never add the g into the reg object.
    var reg = /\d+/g;
    var str1='abcd1234';
    var str2 = '1234avasdsf';
    reg.test(str1);
    //then lastIndex == 8, next match will begin at index 8 in str2, so return false

2. although test don't has match, but still the reg object have do that:
   for example,
   var reg = /(\d)(\d)(\d)/;
   var str = 'abc123sdf';
   console.log(reg.rest(str)); // return true
   // even, in the object
   RegExp.$1, RegExp.$2, RegExp.$3, store the 分组
   // will update for that time

3. str: search, indexOf
   search不可以做到连续查询，所以加g没有影响。返回匹配的index
   indexOf里面的参数不可以有reg object，必须输入string对象，所以要escape 然后加入进去，但是只会依照string进行匹配，和reg无关

4. The method using the RegExp
   RegExp method:   Method Name        |         Parameters               |               Return

                    test(str)  ->                 str                                      boolean
                    exec(str)  ->                 str                                      If the match succeeds, the exec() method returns an array and updates properties of the regular expression object. The returned array has the matched text as the first item, and then one item for each capturing parenthesis that matched containing the text that was captured.
   Notice Here: 1. the return array is not an array, although it has several attributes added.
                   return object:
                                   [0],     the full string of characters matched
                                   [1] ..., the parethesized substring matches
                                   index    the 0-based index of the match in the string
                                   input    the original string

                2. the regular object, like re = /a/, the re object:
                                   lastIndex, the index at which to start the next match. when 'g' is abstent, this will remain 0.
                                   ignoreCase, boolean to indicate the i flag
                                   global,     boolean to indicate the g flag
                                   multiline,  boolean to indicate the m flag
                                   source,     the text of the pattern

   String Method:
                    str.match(regexp)   |          regexp                 |             An Array containing the matched results or null if there were no matches.
                                            If a non-RegExp object obj is
                                            passed, it is implicitly
                                            converted to a RegExp by using
                                             new RegExp(obj).
                    Notice:
                        1. if no g in the regexp, then it is the same with exec, However, with the g, will change the behavior of result
                             the method returns an Array containing all matches. If there were no matches, the method returns null.

                    str.search(regexp)  |           regexp                |            If successful, search() returns the index of the first match of the regular expression inside the string. Otherwise, it returns -1.

                    str.replace(regexp|substr, newSubStr|function[, flags])
                                        |                                 |            return the new built string
                    Notice:
                          1. about the second parameter, the newSubStr and function:
                             $$	Inserts a "$".
                             $&	Inserts the matched substring.
                             $`	Inserts the portion of the string that precedes the matched substring.
                             $'	Inserts the portion of the string that follows the matched substring.
                             $n or $nn	Where n or nn are decimal digits, inserts the nth parenthesized submatch string, provided the first argument was a RegExp object.
                          2. the function:
                             if no parethesized group, then
                                  function(match, index, string)
                             if has parethesized group, then
                                  function(match, $1, $2, $3 ...., index, string)

                    str.split([separator[, limit]])   string|regexp, limit: int |       return the result array
                    Notice:
                           If separator contains capturing parentheses, matched results are returned in the array.
                           var myString = 'Hello 1 word. Sentence number 2.';
                           var splits = myString.split(/(\d)/);

                           console.log(splits);
                           This script displays the following:

                           Hello ,1, word. Sentence number ,2,.



5. exec
   捕获内容并返回一个数组
   {
      0：捕获的东西
      index： 捕获的index
      input： Str
      length：
   }

   exec天生懒惰，只有/g出现之后才会进行多重捕获，通过reg的lastIndex来处理
   如果最后没了，就是返回null，然后lastIndex就会重新refresh为0

   var reg = /(\w)(\w)/;\g;
   reg.global => will indicate the g
   var str = 'asdfdgasdhtewr';
   var a = [];
   var result = null;
   while(result = reg.exec(str)) {
        a.push(result);
   }
   console.log(a);

6. str:match, doesn't care about the sub group, only find the match, with the g, will find them all.
   if no g, then exec is the same with match. 也就是说不加g，match和exec一样，都要考虑到分组，但是如果match加了g，那么就不考虑分组，而是直接输出所有的匹配, 结果为纯属组

   这两个方法都是用来提取正则匹配到的内容，exec处理分组的功能更加强大，match在没有分组的情况下，能够更快捷的把多次匹配到的内容保存到数组里面。exec是正则的方法，而match是str的方法

7. replace
   str function


    [.\n] not allowed, (.|\n) ok

8. reg=/[.\n]/; 不表示匹配任意字符，指标是匹配.和换行符
   reg=/[\w\W]/ 表示所有，\d\D, \s\S
