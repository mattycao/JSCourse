盒子模型：
大纲：
JavaScript中和盒子模型相关的属性和方法

1. 盒子模型1：和高、宽相关的JS属性
      1. 没有现成的直接获得内容宽高的JS属性
      2. clientHeight,clientWidth：带padding的内容宽度
      3. offsetHeight,offsetWidth:带边框的
      4. scrollHeight,scrollWidth实际内容的，不带下padding

2. 盒子模型2：用JS获得CSS属性，行内的和内嵌、外链样式
3. 标准浏览器：window.getComputedStyle
4. IE6/7/8：ele.currentStyle
5. IE6/7/8里的诸多问题
6. 元素的偏移和偏移参照物
      1. offsetLeft和offsetTop
      2. offsetLeft受到什么的影响：标准流自然产生，浮动产生，定位产生，margin产生
      3. 分清绝对定位的left是从那儿开始的，offsetLeft是从那儿开始的
      4. 难点：偏移量产生的参照物
      5. 所有网页元素默认的偏移参照物都是网页文档，body是它的代理人
      6. 当其祖先元素做了相对或绝对定位后，参照物会发生变化
      7. 如何获得网页中任意元素距离文档左上角的偏移量
7. 滚动条：scrollTop或scrollLeft
8. 滚动条属性是可读写的属性
9. scrollTop或scrollLeft的值是有上限和下限的
10. 文字无缝滚动实例
11. 图片延迟加载实例
      1. 按需加载
      2. 图片的异步
      3. 图片的缓存机制
      4. 按需加载图片
      5. 多张图片加载出现的问题和闭包解决方案
      6. 什么时候使用：异步与闭包

clientHeight,clientwidth,clientLeft:左边框的宽,clientTop：上边框的宽
offsetHeight,offsetWidth,offsetLeft左偏移量，从border外边开始算,offsetTop：上偏移量，从上边框外边开始算
scrollTop,scrollLeft,scrollHeight：实际内容的高，包括溢出的内容,scrollWidth：实际内容的宽，包括溢出的内容

内容：

1. 盒子模型
   var w = ele.clientWidth;//内容+padding
   var h = ele.clientHeight;//内容的高+上下的padding;
   var offsetW = ele.offsetWidth;//在clientWidth的基础上+左右边框的宽度
   var offsetH = ele.offsetHeight;//在clentHeight的基础上+上下边框的宽度
   var contentH = ele.scrollHeight;//实际内容的高，包括溢出的，也是包括padding（即使overflow：hidden）.如果没有溢出，
                                   此值和clientHeight相同，如果内容有溢出，则只包括上padding不包括下padding。
   Notice: the css overflow will have influence on the scrollHeight,
            1. it looks like if the overflow is hidden, then the up and down padding will be added with extra 1 pixel.
               if the overflow is not hidden, just visible, by default, the downside of the padding will not be added.

   js中没有盒子实际内容的宽高，width，height，的属性
   也没有得到margin值的属性

2. 没有的话我们需要通过js得到css属性，行内的， 内嵌的， 外链样式

   under standard browser:
      1. window.getComputedStyle(ele, null)
         return an style object, will all of attribute insides.
         var oStyle = window.getComputedStyle(ele, null)
         var height = oStyle.height;  // notice here, the return result is not a number, it is a string, need parseInt or parseFloat

   ie678:
      1. ele.currentStyle(a attribute, not a method like before)
         var oStyle=ele.currentStyle;
         console.log(oStyle);
         Notice: fontSize: 12pt, not a standard, sometimes even em, a relative size. Very hard to get.
                           like the color, it is not rgb(0,0,0) form, it is something else
                 by solving this problem, we better just normalize the css before we do.

         function getCss(ele, attr) {
            if(window.getComputedStyle) { // if( typeof getComputedStyle == 'function')
                return window.getComputedStyle(ele, null)[attr];
            } else {
                return ele.currentStyle[attr];
            }
         }

         Notice:
            can we remove the window, we cannot, since it will throw an error when access the getComputedStyle
            if we don't want the window, we can use the typeof getComputedStyle == 'function' to solve this problem.

            or we can use the try catch to solve this problem

              try {
                return getComputedStyle(ele, null)[attr];
              } catch(e) {
                return ele.currentStyle[attr];
              }


   Notice here:
       JQuery has the method for the css retrevial:
          $("#div1").height();//内容的高
          $("#div1").innerHeight();//相当于clientHeight;
          $("#div1").outerHeight();//相当于offsetHeight;
          $("#div1").outerHeight(true);//offsetHeight+margin(上下的)

   伪类样式查询：
    var strColor=window.getComputedStyle(ele,":before").color;
    #p1::before{
    	content:"我是用CSS添加在段落前边的";
    	color:red;
    	background:black;
    	clear:both;
    	}

3. 偏移量
   offsetLeft：在默认的情况下，所以有元素的偏移量是指相对文档产生的偏移
               只要是能产生距离，就会产生偏移 // console.log(div2.offsetTop);  div1 +body margin
               一个元素产生偏移量的参照物默认是文档（网页）,body做为文档代理人，在JS里叫offsetParent;
               console.log(div2.offsetParent);
               //offsetParent和parentNode不是一码事

   //什么情况，偏移量参照物会发生变化？先明确的一个概念：大家都在一个层级关系
   //z-index,形成新的层级关系的时候：写了相对或绝对定位的时候
   in relative, this ele will relative to his original position, so the following element will
   change the相对偏移的参照物，嘿嘿，理解了不
   the border will be left and right relative

4.function offset(ele){//计算任意DOM元素距离文档的左或上的绝对偏移
  	var l=ele.offsetLeft;
  	var t=ele.offsetTop;
  	var p=ele.offsetParent;
  	while(p){
  		if(window.navigator.userAgent.indexOf("MSIE 8")>-1){
  			l+=p.offsetLeft;//加上上一级的边框  in ie8 already included
  			t+=p.offsetTop;
  		}else{

  			l+=p.offsetLeft+p.clientLeft;//加上上一级的边框  clientLeft is the width of hte left border
  			t+=p.offsetTop+p.clientTop;
  		}

  		p=p.offsetParent;
  	}
  	return {left:l,top:t}

  }

5. window.navigator
   userAgent: browser, something else
   browser core: IE: trident, chrome: like Gecko,

6. scrollTop和文字无缝滚动实例
   scrollTop:
    The Element.scrollTop property gets or sets the number of pixels that the content of an element is scrolled upward.
    the scrollTop is the distense between the padding-top to the border-top, look the image of scrollTop.

    This value is read and write.

    scrollHeight:
    The Element.scrollHeight read-only attribute is a measurement of the height of an element's content,
    including content not visible on the screen due to overflow.

    see the image of scrollHeight

7. so the maximum of scrollTop is: scrollHeight - clientHeight

8. 浏览器所以的外链的资源都是缓存










clientHeight -》
offsetHeight -》
var oStyle = window.getComputedStyle(oDiv, null) // the collections of style // the return object is read only.
oStyle.height => css中的height，而且带单位
oDiv.style.height //行样式， if no, return '', return string


Added from XiaoTian:
* for scrollWidth/ScrollHeight: if the content is not overflow, then it is the same with clientHeight
* If overflow, and omit the key-value: overflow: hidden, then the scrollWidth/scrollHeight will add the upper padding, not the bottom padding
* If add the key-value: overflow: hidden, then the behavior will be totally different in different browser, like in the FF, nothing added, for chrome, add both, for ie, it is complicated. Normally, we can think we didn't add it.
* in default, the body has a 8px margin
* inner.offsetParent. the offset reference, normally we take it as body element
* the box layer will change if we use the position attribute
* the offsetParent will change if we change the position value
* 元素距离他的offsetParent的偏移量不算边框
* var ool = outer.offsetLeft; // outer to body offset distance
  var ocl = outer.clientLeft; // border left width
  var iol = inner.offsetLeft; // inner to outer offset distance
  ool + ocl + iol == inner to body offset distance
* window.navigator.userAgent -> store the browser data in string
* clientWidth, offsetWidth, scrollWidth, offsetleft, are all read only value
* scrollTop can be read and write
* oDiv.onscroll = function() {}, this is a onscroll event, and notice: overflow: scroll